-- 1. HotelChain Table
CREATE TABLE HotelChain (
    HCID bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    chain_number VARCHAR(20),
    CONSTRAINT HotelChain_pkey PRIMARY KEY (HCID)
);

-- 2. Hotel Table
CREATE TABLE Hotel (
    HID bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    category VARCHAR(50),
    star_count INT CHECK (star_count >= 1 AND star_count <= 5),
    chain_id bigint NOT NULL,
    manager_id bigint,  -- This will be updated via trigger
    CONSTRAINT Hotel_pkey PRIMARY KEY (HID),
    CONSTRAINT fk_Hotel_chain_id FOREIGN KEY (chain_id)
        REFERENCES HotelChain (HCID)
        ON DELETE CASCADE
);

-- 3. Customer Table
CREATE TABLE Customer (
    cust_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    full_name VARCHAR(100) NOT NULL,
    address VARCHAR(255),
    phone VARCHAR(20),
    email VARCHAR(100) UNIQUE,
    reg_date DATE NOT NULL,
    CONSTRAINT Customer_pkey PRIMARY KEY (cust_id)
);

-- 4. Room Table
CREATE TABLE Room (
    room_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    room_number VARCHAR(20) NOT NULL,
    price DECIMAL(8,2) CHECK (price >= 0),
    capacity VARCHAR(20) NOT NULL,
    extended BOOLEAN DEFAULT FALSE,
    problems TEXT,
    hotel_id bigint NOT NULL,
    CONSTRAINT Room_pkey PRIMARY KEY (room_id),
    CONSTRAINT fk_Room_hotel_id FOREIGN KEY (hotel_id)
        REFERENCES Hotel (HID)
        ON DELETE CASCADE
);

-- 5. Amenities Table
CREATE TABLE Amenities (
    amenity_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    wifi BOOLEAN DEFAULT FALSE,
    ac BOOLEAN DEFAULT FALSE,
    pool BOOLEAN DEFAULT FALSE,
    gym BOOLEAN DEFAULT FALSE,
    spa BOOLEAN DEFAULT FALSE,
    parking BOOLEAN DEFAULT FALSE,
    fridge BOOLEAN DEFAULT FALSE,
    coffee BOOLEAN DEFAULT FALSE,
    room_id bigint NOT NULL,
    CONSTRAINT Amenities_pkey PRIMARY KEY (amenity_id),
    CONSTRAINT fk_Amenities_room_id FOREIGN KEY (room_id)
        REFERENCES Room (room_id)
        ON DELETE CASCADE
);

-- 6. Employee Table
CREATE TABLE Employee (
    emp_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    full_name VARCHAR(100) NOT NULL,
    address VARCHAR(255),
    phone VARCHAR(255),
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255),
    role VARCHAR(50),
    manager BOOLEAN DEFAULT FALSE,
    hotel_id bigint NOT NULL,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    "position" VARCHAR(255),
    CONSTRAINT Employee_pkey PRIMARY KEY (emp_id),
    CONSTRAINT employee_email_key UNIQUE (email),
    CONSTRAINT fk_Employee_hotel_id FOREIGN KEY (hotel_id)
        REFERENCES Hotel (HID)
        ON UPDATE NO ACTION
        ON DELETE CASCADE
);

-- Unique Index: Ensure only one manager per hotel in the Employee table.
CREATE UNIQUE INDEX IF NOT EXISTS unique_manager_per_hotel
    ON Employee (hotel_id)
    WHERE manager = true;

-- 7. Booking Table
CREATE TABLE Booking (
    booking_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    booking_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) NOT NULL,  -- e.g., 'confirmed', 'cancelled', 'checked_in'
    room_id bigint NOT NULL,
    cust_id bigint NOT NULL,
    employee_id bigint,
    CONSTRAINT Booking_pkey PRIMARY KEY (booking_id),
    CONSTRAINT fk_Booking_room_id FOREIGN KEY (room_id)
        REFERENCES Room (room_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_Booking_cust_id FOREIGN KEY (cust_id)
        REFERENCES Customer (cust_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_Booking_employee_id FOREIGN KEY (employee_id)
        REFERENCES Employee (emp_id)
        ON DELETE SET NULL,
    CONSTRAINT chk_dates CHECK (check_in_date < check_out_date)
);

-- 8. Renting Table
CREATE TABLE Renting (
    renting_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        INCREMENT 1 START 1
    ),
    booking_id bigint,  -- may be NULL if rented without a prior booking
    date_in TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    date_out TIMESTAMP,
    payment DECIMAL(8,2) CHECK (payment >= 0),
    employee_id bigint NOT NULL,
    room_id bigint NOT NULL,
    cust_id bigint NOT NULL,
    CONSTRAINT Renting_pkey PRIMARY KEY (renting_id),
    CONSTRAINT fk_Renting_booking_id FOREIGN KEY (booking_id)
        REFERENCES Booking (booking_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_Renting_employee_id FOREIGN KEY (employee_id)
        REFERENCES Employee (emp_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_Renting_room_id FOREIGN KEY (room_id)
        REFERENCES Room (room_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_Renting_cust_id FOREIGN KEY (cust_id)
        REFERENCES Customer (cust_id)
        ON DELETE SET NULL
);

-- 9. Trigger Function to Update Hotel's Manager
CREATE OR REPLACE FUNCTION public.update_hotel_manager()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE Hotel
    SET manager_id = NEW.emp_id
    WHERE HID = NEW.hotel_id;
    RETURN NEW;
END;
$$;

-- 10. Trigger to Call update_hotel_manager when an Employee marked as a manager is inserted/updated
CREATE TRIGGER trg_update_hotel_manager
AFTER INSERT OR UPDATE ON Employee
FOR EACH ROW
WHEN (NEW.manager = true)
EXECUTE FUNCTION public.update_hotel_manager();
